package org.example.dao.admin;import org.example.model.Admin;import org.example.model.Employee;import org.example.utils.CommonUtils;import org.hibernate.Session;import java.util.List;import java.util.Objects;import java.util.Scanner;import static org.example.dao.branch.BranchDAO.createBranch;import static org.example.dao.branch.BranchDAO.deleteBranch;import static org.example.utils.AccountUtils.getAccountDataFromJSON;public class AdminDAO extends AdminOPS {    private boolean isLoggedIn;    Scanner scanner = new Scanner(System.in);    public void entry(Session session) {        System.out.println("Welcome-Please login to the portal.");        adminLogin(session);        if (isLoggedIn) {            while (isLoggedIn) {                System.out.println("Press\n" +                        "------Employee-------\n1.Add Employee\n2.Update Employee\n3.Delete Employee\n" +                        "------Accounts--------\n4.Add Account\n5.Update Account\n6.Delete Account\n" +                        "-------Branches-------\n7.Create Branch\n8.Update Branch\n9.Delete Branch\n10.Logout");                System.out.print("Enter the option - ");                int opt = scanner.nextInt();                switch (opt) {                    case 1:                        boolean isCreated = createEmployee(session);                        if (isCreated) {                            System.out.println("Employee is created successfully.");                        } else {                            System.out.println("Employee is not created.");                        }                        break;                    case 2:                        boolean isEmployeeUpdated = updateEmployee(session);                        if (isEmployeeUpdated) {                            System.out.println("Employee data is updated successfully.");                        } else {                            System.out.println("Failed to update the employee data. Please try again with valid data.");                        }                        break;                    case 3:                        boolean isEmployeeDeleted = deleteEmployee(session);                        if (isEmployeeDeleted) {                            System.out.println("Employee data is deleted successfully.");                        } else {                            System.out.println("Employee data is not deleted. Please try with valid details.");                        }                        break;                    case 4:                        boolean isAccountCreated = createAccount(session,getAccountDataFromJSON("Account/NewAccount.json"));                        if (isAccountCreated) {                            System.out.println("Account is created successfully.");                        } else {                            System.out.println("Failed to create an account with given details.");                        }                        break;                    case 5:                        boolean isAccountUpdated = updateAccount(session, getAccountDataFromJSON("Account/UpdateAccount.json"));                        if (isAccountUpdated) {                            System.out.println("Account is updated successfully.");                        } else {                            System.out.println("Failed to update an account with given details.");                        }                        break;                    case 6:                        System.out.print("Enter the account number to delete - ");                        String accountNumber = scanner.next();                        boolean isAccountDeleted = deleteAccount(session, accountNumber);                        if (isAccountDeleted) {                            System.out.println("Account is deleted successfully.");                        } else {                            System.out.println("Failed to delete an account with given details.");                        }                        break;                    case 7:                        boolean isBranchCreate = createBranch(session, CommonUtils.getBranchDataFromJSON("Branch/CreateBranch.json"));                        if (isBranchCreate) {                            System.out.println("Branch is created successfully.");                        } else {                            System.out.println("Failed to create the branch with these data.");                        }                        break;                    case 9:                        System.out.print("Enter the IFSC Code - ");                        String ifscCode = scanner.next();                        boolean isBranchUpdated = deleteBranch(session, ifscCode);                        if (isBranchUpdated) {                            System.out.println("Branch is deleted successfully.");                        } else {                            System.out.println("Failed to create the branch with these data.");                        }                        break;                    case 10:                        adminLogout();                        break;                    default:                        System.out.println("Invalid option. Please choose a valid option.");                }            }        }    }    private void adminLogin(Session session) {        System.out.print("Enter the username - ");        String username = scanner.next();        System.out.print("Enter the password - ");        String password = scanner.next();        try {            Admin admin = CommonUtils.getAdminData(session,username);            if (Objects.equals(admin.getPassword(), password)) {                isLoggedIn = true;                System.out.println("Login Success");            }        } catch (Exception e) {            System.out.println("Failed to login.");        }    }    private void adminLogout() {        isLoggedIn = false;    }    private List<Employee> getAllEmployeeDetails() {        try {            //return session.createQuery("from employee", Employee.class).list();        } catch (Exception e) {            throw new RuntimeException(e);        }        return null;    }    private List<Employee> getAllEmployeeDetailsInBranch(String ifscCode) {        try {            String query = "from employee where branchCode=\"" + ifscCode + "\"";//            return session.createQuery(query, Employee.class).list();        } catch (Exception e) {            throw new RuntimeException(e);        }        return null;    }}