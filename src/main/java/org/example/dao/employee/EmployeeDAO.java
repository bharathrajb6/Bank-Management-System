package org.example.dao.employee;import com.fasterxml.jackson.databind.ObjectMapper;import org.example.dao.branch.BranchDAO;import org.example.model.*;import static java.lang.String.valueOf;import static org.example.utils.CommonUtils.*;import static org.example.utils.AccountUtils.getAccountDataFromJSON;import org.hibernate.Session;import org.hibernate.Transaction;import java.io.File;import java.io.IOException;import java.time.LocalDateTime;import java.util.List;import java.util.Objects;import java.util.Scanner;public class EmployeeDAO extends EmployeeOPS {    Scanner scanner = new Scanner(System.in);    private boolean loggedIn;    public void entry(Session session) {        System.out.println("Hello!");        System.out.println("Please login to the portal");        login(session);        if (loggedIn) {            while (loggedIn) {                System.out.print("Press\n1.Create Account\n2.Update Account\n3.Delete Account\n4.Get All Account Details\n" +                        "5.Add Amount\n6.Withdraw Amount\n7.Apply Loan\n8.Get Loan Status\n9.Logout\n");                System.out.print("Enter your choice - ");                int opt = scanner.nextInt();                switch (opt) {                    case 1:                        Account account = getAccountDataFromJSON("NewAccount.json");                        boolean isNewAccountDataIsValid = validateBasicAccountDetails(account);                        if (isNewAccountDataIsValid) {                            boolean accountCreated = createAccount(session, account);                            if (accountCreated) {                                generateLogMessage("Create Account", "Info", "Account has been created successfully");                            } else {                                generateLogMessage("Create Account", "Error", "Failed to create an account with the given details");                            }                        } else {                            generateLogMessage("Create Account", "Error", "Please try with valid data");                        }                        break;                    case 2:                        Account upAccount = getAccountDataFromJSON("UpdateAccount.json");                        boolean isUpdateAccountDataIsValid = validateBasicAccountDetails(upAccount);                        if (isUpdateAccountDataIsValid) {                            boolean accountUpdated = updateAccount(session, upAccount);                            if (accountUpdated) {                                generateLogMessage("Update Account", "Info", "Account has been updated successfully");                            } else {                                generateLogMessage("Update Account", "Error", "Failed to update an account with the given details");                            }                        } else {                            generateLogMessage("Update Account", "Error", "Please try with valid data");                        }                        break;                    case 3:                        System.out.print("Enter the account number - ");                        String accountNumber = scanner.next();                        boolean isAccountDeleted = deleteAccount(session, accountNumber);                        if (isAccountDeleted) {                            generateLogMessage("Delete Account Account", "Info", "Account has been deleted successfully");                        } else {                            generateLogMessage("Delete Account Account", "Error", "Failed to delete an account");                        }                        break;                    case 4:                        System.out.print("Enter the IFSC Code - ");                        String ifscCode = scanner.next();                        displayAllAccountDetailsInBranchWise(session, ifscCode);                        break;                    case 5:                        System.out.println("Enter the account number - ");                        String AccountNumber = scanner.next();                        System.out.print("Enter the amount - ");                        int amount = scanner.nextInt();                        boolean isAmountCredited = creditAmount(session, AccountNumber, amount);                        if (isAmountCredited) {                            generateLogMessage("Credit Amount", "Info", "Amount has been credited successfully");                        }                        break;                    case 6:                        System.out.println("Enter the account number - ");                        String accountNmbr = scanner.next();                        System.out.print("Enter the amount - ");                        int withdrawAmount = scanner.nextInt();                        boolean idAmountDebited = debitAmount(session, accountNmbr, withdrawAmount);                        if (idAmountDebited) {                            generateLogMessage("Debit Amount", "Info", "Amount has been debited successfully");                        }                        break;                    case 7:                        boolean isApplied = applyLoan(session);                        if (isApplied) {                            generateLogMessage("Apply Loan", "Info", "Loan has been applied successfully.");                        } else {                            generateLogMessage("Apply Loan", "Error", "Failed to apply the loan.");                        }                    case 8:                        System.out.println("Enter the loanID - ");                        String loanID = scanner.next();                        System.out.println(getLoanStatus(session, loanID));                    case 9:                        System.out.println("Enter the account number - ");                        accountNmbr = scanner.next();//                        boolean isAppliedForCard = applyForCard(session, accountNmbr);                    case 11:                        logout();                        break;                    default:                        generateLogMessage("----", "Error", "Please select the appropriate option");                }            }        } else {            generateLogMessage("Employee Login", "Error", "Username or Password is wrong");        }    }    public void login(Session session) {        System.out.print("Enter the username - ");        String employeeID = scanner.next();        System.out.print("Enter the password - ");        String password = scanner.next();        try {            Employee employee = session.get(Employee.class, employeeID);            if (Objects.equals(employee.getPassword(), password) && employee.isSuperUser()) {                loggedIn = true;                generateLogMessage("Employee Login", "INFO", "Login Success");            }        } catch (Exception e) {            generateLogMessage("Employee Login", "INFO", "Failed to login");        }    }    public void logout() {        loggedIn = false;    }    private void displayAllAccountDetailsInBranchWise(Session session, String ifscCode) {        List accountList = getAllAccountDataInBranch(session, ifscCode);        ObjectMapper objectMapper = new ObjectMapper();        try {            objectMapper.writeValue(new File("/Users/bsringer/Documents/Projects/Java/Bank Management System/src/main/resources/Branch/UserDetails.json"), accountList);            generateLogMessage("Display All User Details", "Info", "User Data has been successfully saved in UserDetails.jso file");        } catch (IOException e) {            generateLogMessage("Display All User Details", "Error", "Failed to add the data to the UserDetails.json");        }    }    protected static boolean validateAccountDetails(Session session, Account acunt) {        boolean isValidData = true;        List<Account> accountList = getAllAccountData(session);        List<Branch> branchList = BranchDAO.getAllBranchData();        boolean isBranchPresent = false;        for (Account account : accountList) {            if (Objects.equals(account.getAccountNumber(), acunt.getAccountNumber())) {                generateLogMessage("Create Account Account", "Error", "This account number is already exist");                isValidData = false;            }            if (Objects.equals(account.getAadharNo(), acunt.getAadharNo())) {                generateLogMessage("Create Account Account", "Error", "This aadhar number is already exist");                isValidData = false;            }            if (Objects.equals(account.getPanNo(), acunt.getPanNo())) {                generateLogMessage("Create Account Account", "Error", "This PAN number is already exist");                isValidData = false;            }            if (Objects.equals(account.getMobileNo(), acunt.getMobileNo())) {                generateLogMessage("Create Account Account", "Error", "This mobile number is already exist");                isValidData = false;            }        }        for (Branch branch : branchList) {            if (Objects.equals(acunt.getBranchCode(), branch.getIfscCode())) {                isBranchPresent = true;                break;            }        }        if (!isBranchPresent) {            isValidData = false;        }        return isValidData;    }    private boolean creditAmount(Session session, String accountNumber, int amount) {        Transaction transaction = null;        try {            Account account = session.get(Account.class, accountNumber);            account.setAmount(account.getAmount() + amount);            AccountTransaction accountTransaction = createTransaction(accountNumber, "CREDIT", account.getFirstName(), "Challan");            transaction = session.beginTransaction();            session.save(account);            session.save(accountTransaction);            transaction.commit();            return true;        } catch (Exception e) {            if (transaction != null) {                transaction.rollback();            }        }        return false;    }    private boolean debitAmount(Session session, String accountNumber, int amount) {        Transaction transaction = null;        try {            Account account = session.get(Account.class, accountNumber);            if (amount <= account.getAmount()) {                account.setAmount(account.getAmount() - amount);                AccountTransaction accountTransaction = createTransaction(accountNumber, "DEBIT", account.getFirstName(), "Bank");                transaction = session.beginTransaction();                session.save(account);                session.save(accountTransaction);                transaction.commit();                return true;            } else {                generateLogMessage("Debit Amount", "Error", "Amount is not enough.");                return false;            }        } catch (Exception e) {            if (transaction != null) {                transaction.rollback();            }        }        return false;    }    private AccountTransaction createTransaction(String accountNumber, String action, String name, String type) {        AccountTransaction transactions = new AccountTransaction();        transactions.setTranactionID(valueOf(generateRandomNumber(10)));        transactions.setAccountNumber(accountNumber);        transactions.setActions(action);        transactions.setUserName(name);        transactions.setTransactionTime(LocalDateTime.now());        transactions.setType(type);        return transactions;    }    private boolean applyLoan(Session session) {        boolean isLoanApplied = false;        Transaction transaction = null;        Loan loan = new Loan();        loan = getloanDataFromJSON("ApplyLoan.json");        loan.setLoanID(String.valueOf(generateRandomNumber(20)));        try {            transaction = session.beginTransaction();            session.save(loan);            transaction.commit();            isLoanApplied = true;        } catch (Exception e) {            if (transaction != null) {                transaction.rollback();            }        }        return isLoanApplied;    }    private String getLoanStatus(Session session, String loanID) {        Loan loan = session.get(Loan.class, loanID);        String status = loan.getLoanStatus();        return status;    }//    private boolean applyForCard(Session session, String accountNumber) {//        boolean isApplied = false;//        Cards cards = generateCardInfo(accountNumber);//        boolean isValidDetail = validateCardInfo(cards);//        Transaction transaction = null;//        try {//            transaction = session.beginTransaction();//            session.save(cards);//            transaction.commit();//            isApplied = true;//        } catch (Exception e) {//            if (transaction != null) {//                transaction.rollback();//            }//        }//        return isApplied;//    }    private Cards generateCardInfo(String accountNumber) {        Cards cards = new Cards();        cards.setCardNumber(String.valueOf(generateRandomNumber(16)));        System.out.println("Press\n1.For Credit Card\n2.For Debit Card\n");        System.out.printf("Enter the option - ");        int option = scanner.nextInt();        if (option == 1) {            cards.setType("CREDIT");        } else if (option == 2) {            cards.setType("DEBIT");        }        cards.setPin(1234);        cards.setCvv(769);        cards.setAccountNumber(accountNumber);        return cards;    }}