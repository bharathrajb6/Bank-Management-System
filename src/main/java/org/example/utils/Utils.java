package org.example.utils;import com.fasterxml.jackson.databind.ObjectMapper;import org.example.dao.branch.BranchDAO;import org.example.hibernate.HibernateUtils;import org.example.model.Account;import org.example.model.Admin;import org.example.model.Branch;import org.example.model.Employee;import org.example.model.Loan;import org.hibernate.Session;import org.hibernate.query.Query;import java.io.File;import java.io.IOException;import java.util.List;import java.util.Objects;import java.util.Random;import java.util.logging.Logger;public class Utils {    public static long generateRandomNumber(int length) {        if (length <= 0) {            throw new IllegalArgumentException("Length should be a positive integer");        }        Random random = new Random();        long lowerBound = (long) Math.pow(10, length - 1);        long upperBound = (long) Math.pow(10, length) - 1;        return lowerBound + random.nextInt((int) (upperBound - lowerBound + 1));    }    public static String validateBranchData(Branch branch) {        if (branch.getBranchName() == null || branch.getBranchName().isBlank()) {            return "Branch name cannot be null or empty.";        }        if (branch.getPlace() == null || branch.getPlace().isBlank()) {            return "Place cannot be null or empty.";        }        if (branch.getTaluk() == null || branch.getTaluk().isBlank()) {            return "Taluk name cannot be null or empty.";        }        if (branch.getDistrict() == null || branch.getDistrict().isBlank()) {            return "District name cannot be null or empty.";        }        if (branch.getState() == null || branch.getState().isBlank()) {            return "State name cannot be null or empty.";        }        if (branch.getPincode() == null || branch.getPincode().isBlank()) {            return "Pin-code name cannot be null or empty.";        }        if (branch.getPincode().length() != 6) {            return "Pin-code length should be 6.";        }        BranchDAO branchDAO = new BranchDAO();        List<Branch> allBranchesData = branchDAO.getAllBranchData();        for (Branch bnch : allBranchesData) {            if (Objects.equals(branch.getBranchName(), bnch.getBranchName())) {                return "This branch name is already exist.";            }            if (Objects.equals(branch.getPincode(), bnch.getPincode())) {                return "In this pin-code already a branch is exist";            }            if (Objects.equals(branch.getPlace(), bnch.getPlace())) {                return "In this place, already a branch is exist";            }        }        return null;    }    public static Employee getEmployeeData(String employeeID) {        Employee employee;        try (Session session = (Session) HibernateUtils.getSessionFactory().openSession()) {            String query = "from employee where employeeID=\"" + employeeID + "\"";            employee = (Employee) session.createQuery(query, Employee.class);        } catch (Exception e) {            employee = null;        }        return employee;    }    public static Account getAccountData(Session session, Account accountNumber) {        Account account;        try {            String query = "from account where accountNumber=\"" + accountNumber;            account = (Account) session.createQuery(query, Account.class);        } catch (Exception e) {            account = null;        }        return account;    }    public static Branch getBranchData(Session session, String ifscCode) {        Branch branch;        try {            String query = "from branches where ifscCode=\"" + ifscCode + "\"";            branch = (Branch) session.createQuery(query, Branch.class);        } catch (Exception e) {            branch = null;        }        return branch;    }    public static Admin getAdminData(Session session, String username) {        Admin admin;        try {            String hql = "from admin where username=:filterCondition";            Query query = session.createQuery(hql);            query.setParameter("filterCondition", username);            admin = (Admin) query.uniqueResult();        } catch (Exception e) {            admin = null;        }        return admin;    }    public static Employee getEmployeeDataFromJSON(String fileName) {        Employee employee;        try {            ObjectMapper objectMapper = new ObjectMapper();            String filePath = "src/main/resources/" + fileName;            File jsonData = new File(filePath);            employee = objectMapper.readValue(jsonData, Employee.class);        } catch (IOException e) {            throw new RuntimeException(e);        }        return employee;    }    public static Account getAccountDataFromJSON(String fileName) {        Account account;        try {            ObjectMapper objectMapper = new ObjectMapper();            String filePath = "src/main/resources/Account/" + fileName;            File jsonData = new File(filePath);            account = objectMapper.readValue(jsonData, Account.class);        } catch (IOException e) {            throw new RuntimeException(e);        }        return account;    }    public static Branch getBranchDataFromJSON(String fileName) {        Branch branch;        try {            ObjectMapper objectMapper = new ObjectMapper();            String filePath = "src/main/resources/" + fileName;            File jsonData = new File(filePath);            branch = objectMapper.readValue(jsonData, Branch.class);        } catch (IOException e) {            throw new RuntimeException(e);        }        return branch;    }    public static Admin getAdminDataFromJSON(String fileName) {        Admin admin;        try {            ObjectMapper objectMapper = new ObjectMapper();            String filePath = "src/main/resources/" + fileName;            File jsonData = new File(filePath);            admin = objectMapper.readValue(jsonData, Admin.class);        } catch (IOException e) {            throw new RuntimeException(e);        }        return admin;    }    public static boolean validateBasicAccountDetails(Account account) {        if (account.getAmount() < 0) {            generateLogMessage("Create Account Account", "Error", "Amount should not be zero");            return false;        } else if (account.getMobileNo().length() != 10) {            generateLogMessage("Create Account Account", "Error", "Mobile number length should be 10");            return false;        } else if (account.getAadharNo().length() != 12) {            generateLogMessage("Create Account Account", "Error", "Aadhar number length should be 12");            return false;        } else if (account.getAge() < 18) {            generateLogMessage("Create Account Account", "Error", "Account holder age should be more than 12");            return false;        } else if (account.getFirstName().isBlank() || account.getLastName().isBlank()) {            generateLogMessage("Create Account Account", "Error", "Account holder name should not be empty");            return false;        }        return true;    }    public static void generateLogMessage(String methodName, String type, String message) {        Logger logger = Logger.getLogger(methodName);        if (Objects.equals(type, "Info")) {            logger.info(message);        } else if (Objects.equals(type, "Error")) {            logger.severe(message);        }    }    public static Loan getloanDataFromJSON(String fileName) {        Loan loan;        try {            ObjectMapper objectMapper = new ObjectMapper();            String filePath = "src/main/resources/Loan/" + fileName;            File jsonData = new File(filePath);            loan = objectMapper.readValue(jsonData, Loan.class);        } catch (IOException e) {            throw new RuntimeException(e);        }        return loan;    }}